{
	"info": {
		"_postman_id": "bd25fb5e-e0ba-49ab-80c6-8d8aea735591",
		"name": "Job Search webapp",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Đăng ký Ứng Viên",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cae77caa-dfb1-4f6e-8cad-c61cea25cb85",
						"exec": [
							"/*\r",
							"    - Đăng ký thành công (201) khi điền đủ các field:\r",
							"        + name\r",
							"        + email\r",
							"        + account\r",
							"        + password\r",
							"        + phone\r",
							"        + birthday\r",
							"        + experience\r",
							"        + skill\r",
							"        + description\r",
							"        + Foreign Language\r",
							"        + education\r",
							"        + avatar\r",
							"*/\r",
							"\r",
							"let resCode = pm.response.code;\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"pm.test(\"Register successfully => Code = 201\", () => {\r",
							"    pm.expect(resCode).to.eql(201);\r",
							"})\r",
							"\r",
							"if (resCode == 201) {\r",
							"\r",
							"    console.log(\"Đăng ký thông tin và tài khoản thành công!\")\r",
							"    \r",
							"    pm.test(\"All fields of Account ID: \" + resBody.id + \" was fulfilled\", () => {\r",
							"        pm.expect(resBody.name).to.be.not.empty;\r",
							"        pm.expect(resBody.email).to.be.not.empty;\r",
							"        pm.expect(resBody.account).to.be.not.empty;\r",
							"        pm.expect(resBody.password).to.be.not.empty;\r",
							"        pm.expect(resBody.phone).to.be.not.empty;\r",
							"        pm.expect(resBody.sex).to.be.not.empty;\r",
							"        pm.expect(resBody.birthday).to.be.not.empty;\r",
							"        pm.expect(resBody.experience).to.be.not.empty;\r",
							"        pm.expect(resBody.skill).to.be.not.empty;\r",
							"        pm.expect(resBody.description).to.be.not.empty;\r",
							"        pm.expect(resBody.foreiginLanguage).to.be.not.empty;\r",
							"        pm.expect(resBody.education).to.be.not.empty;\r",
							"        pm.expect(resBody.avatar).to.be.not.empty;\r",
							"    })\r",
							"  \r",
							"    //Save username-PW và userId sau khi tạo account Ứng Viên\r",
							"    pm.environment.set(\"idUV\", resBody.id);\r",
							"    pm.environment.set(\"usernameUV\", resBody.account);\r",
							"    pm.environment.set(\"passwordUV\", resBody.password);\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test(\"Fail to Register an account => Code = 500\", () => {\r",
							"        pm.expect(resCode).to.eql(500);\r",
							"    })\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38397fce-cfb5-4670-a627-ea3a1fa29946",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4514572c-0904-42d1-829e-d8ea1f8bc34b",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "THMT",
							"type": "text"
						},
						{
							"key": "email",
							"value": "THMT@gmail.com",
							"type": "text"
						},
						{
							"key": "account",
							"value": "THMT001",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Pass@123",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "1234567890",
							"type": "text"
						},
						{
							"key": "sex",
							"value": "Nam",
							"type": "text"
						},
						{
							"key": "birthday",
							"value": "11/11/1997",
							"type": "text"
						},
						{
							"key": "experience",
							"value": "test",
							"type": "text"
						},
						{
							"key": "skill",
							"value": "test",
							"type": "text"
						},
						{
							"key": "description",
							"value": "test",
							"type": "text"
						},
						{
							"key": "foreiginLanguage",
							"value": "test",
							"type": "text"
						},
						{
							"key": "education",
							"value": "test",
							"type": "text"
						},
						{
							"key": "avatar",
							"type": "file",
							"description": "file png/jpg (must include)",
							"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
							"filesNotInWorkingDirectory": [
								"/C:/Users/lenovo/Pictures/Camera Roll/astronaut-ai-4k-wallpaper-uhdpaper.com-711@1@l.jpg"
							],
							"src": "/C:/Users/lenovo/Pictures/Camera Roll/astronaut-ai-4k-wallpaper-uhdpaper.com-711@1@l.jpg"
						}
					]
				},
				"url": "{{baseURL}}/{{signUpCandidatePath}}"
			},
			"response": []
		},
		{
			"name": "ĐĂNG NHẬP (Ứng viên)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "54d7624e-9671-48ea-b266-2ca0af48c5e6",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5fc33cad-4954-4a9c-bc50-0b48e561084b",
						"exec": [
							"let resCode = pm.response.code;\r",
							"\r",
							"//Biến tạo shortcut console log\r",
							"const log = console.log.bind(console);\r",
							"\r",
							"//Lấy value từ tab Body -> parse thành JSON\r",
							"let dataParsed = JSON.parse(pm.request.body.raw);\r",
							"let dataFromBody = dataParsed;\r",
							"let inputPassword = dataFromBody.password;\r",
							"let inputAccount = dataFromBody.account;\r",
							"\r",
							"//Dùng So sánh với Value từ tab Body\r",
							"const userId = pm.environment.get(\"idUV\");\r",
							"//Parse userId từ envir thành Int để đồng bộ data_type\r",
							"const userIdInt = parseInt(userId);\r",
							"const tenTK = pm.environment.get(\"usernameUV\");\r",
							"const correctPass = pm.environment.get(\"passwordUV\");\r",
							"\r",
							"//message khi 200\r",
							"const messTC = \"Đăng nhập thành công\";\r",
							"\r",
							"//message khi 404(đúng format PW nhưng sai Account)\r",
							"const mess404 = \"Tài khoản người dùng không tồn tại\";\r",
							"\r",
							"//message khi 400(Sai PW || PW trống || Username trống)\r",
							"const messIncorrectPass = \"Tài khoản người dùng không tồn tại\";\r",
							"\r",
							"//message khi 400(MK không đạt yêu cầu => 8 chars && có @-a-A-1)\r",
							"const messInvalidFormatPass = \"Mật khẩu không hợp lệ, mật khẩu phải tối thiểu 8 kí tự, bao gồm chữ hoa, thường, số\";\r",
							"\r",
							"\r",
							"// phải có ít nhất 1 ký tự thường & 1 ký tự HOA & 1 ký tự đặc biệt & 1 số. Len tối thiểu = 8\r",
							"let passwordSchema = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#?!@$%^&*-])[A-Za-z\\d#?!@$%^&*-]{8,}$/;\r",
							"/* code:\r",
							"    var formTest = /value/;\r",
							"    /\r",
							"        ^: Bắt đầu của một chuỗi.\r",
							"        (?=.*[a-z]): Đảm bảo chuỗi chứa ít nhất một ký tự chữ cái viết thường.\r",
							"        (?=.*[A-Z]): Đảm bảo chuỗi chứa ít nhất một ký tự chữ cái viết hoa.\r",
							"        (?=.*\\d): Đảm bảo chuỗi chứa ít nhất một chữ số.\r",
							"        (?=.*[#?!@$%^&*-]): Đảm bảo chuỗi chứa ít nhất một ký tự đặc biệt (có thể thay đổi hoặc mở rộng theo yêu cầu).\r",
							"        [A-Za-z\\d#?!@$%^&*-]{8,}: Đảm bảo chuỗi chứa ít nhất 8 ký tự từ những ký tự đã được xác định trước đó.\r",
							"        $: Kết thúc của một chuỗi.\r",
							"    /\r",
							"*/\r",
							"\r",
							"// Kiểm tra Format của PW ở tab Body có khớp với format của passFormat ko\r",
							"let isPasswordValid = passwordSchema.test(dataFromBody.password);\r",
							"\r",
							"//Đăng nhập THẤT BẠI 400 -- PW trống or Account trống or PW sai\r",
							"if ( inputPassword === \"\" || inputAccount === \"\" || (isPasswordValid === true && inputPassword !== correctPass && inputAccount === tenTK)) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"Account hoặc PW trống || Account có input và PW Sai => Code = 400\", () => {\r",
							"        pm.expect(resCode).to.eql(400);\r",
							"    })\r",
							"    log (\"Account hoặc PW trống || Account có input và PW Sai -> Actual Code là: \" + resCode);\r",
							"\r",
							"    log (\"Expected message khi(Account hoặc PW trống || Account có input và PW Sai): \" + messIncorrectPass);\r",
							"    pm.test(\"Message phải là \\\"Tài khoản người dùng không tồn tại\\\"\", () => {\r",
							"        pm.expect(pm.response.text()).to.include(\"Tài khoản người dùng không tồn tại\");\r",
							"    })\r",
							"    log (\"Actual message khi(Account hoặc PW trống || Account có input và PW Sai): \" + resBody.message);\r",
							"\r",
							"}\r",
							"\r",
							"//Đăng nhập THÀNH CÔNG\r",
							"if (inputAccount === tenTK && inputPassword === correctPass) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"Account đúng && PW đúng -> Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"    log (\"Actual Code(khi Account đúng && PW đúng) -> \" + resCode);\r",
							"\r",
							"    log (\"Expected message (khi Account đúng && PW đúng): \" + messTC);\r",
							"    pm.test(\"Message phải là \\\"Đăng nhập thành công\\\"\", () => {\r",
							"        pm.expect(resBody.message).to.eql(messTC);\r",
							"    })\r",
							"    log (\"Actual message (khi Account đúng && PW đúng): \" + resBody.message);\r",
							"\r",
							"    pm.test(\"User ID và Account từ RESPONSE phải trùng với thông tin khi đăng nhập\", () => {\r",
							"        \r",
							"        let matchInfo = true;\r",
							"\r",
							"        log(\"Id user đăng nhập là: \" + userIdInt); //ID khi tạo account thành công và lưu biến\r",
							"        log(\"Username đang dùng đăng nhập là: \" + tenTK); //username khi tạo account TC và lưu biến\r",
							"        \r",
							"        //Chuyển ID từ response về dạng Int để đồng bộ data_type \r",
							"        let resIdInt = parseInt(resBody.user.id);\r",
							"\r",
							"        if (resIdInt !== userIdInt || resBody.user.account !== tenTK) {\r",
							"\r",
							"            matchInfo = false;\r",
							"\r",
							"            log(\"Response User KHÔNG trùng khớp khi Đăng Ký!\");\r",
							"            log(\"ID từ Response: \" + resIdInt);\r",
							"            log(\"Username từ Response: \" + resBody.user.account);\r",
							"\r",
							"        } else {\r",
							"\r",
							"            pm.environment.set(\"tokenUV\", resBody.token);\r",
							"\r",
							"            log(\"Response User KHÔNG trùng khớp khi Đăng Ký!\");\r",
							"            log(\"ID từ Response: \" + resIdInt);\r",
							"            log(\"Username từ Response: \" + resBody.user.account);\r",
							"\r",
							"        }\r",
							"\r",
							"        pm.expect(matchInfo).to.be.true;\r",
							"\r",
							"    })\r",
							"}\r",
							"\r",
							"//Check 400: Account có input - Mật Khẩu không đúng FORMAT\r",
							"if (inputAccount !== \"\" && inputPassword !== \"\" && isPasswordValid === false) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    log (\"Mật khẩu đang dùng đăng nhập là: \" + inputPassword);\r",
							"\r",
							"    pm.test(\"Password KO đạt yêu cầu => Code == 400\", () => {\r",
							"        pm.expect(resCode).to.eql(400);\r",
							"    })\r",
							"    log (\"Actual Code -> \" + resCode);\r",
							"\r",
							"    log (\"Expected message (Có Username & PW sai Format) -> \" + messInvalidFormatPass);\r",
							"    pm.test(\"Password KO đạt yêu cầu => Message: \\\"Mật khẩu không hợp lệ, mật khẩu phải tối thiểu 8 kí tự, bao gồm chữ hoa, thường, số\\\"\", () => {\r",
							"        pm.expect(resBody).to.eql(messInvalidFormatPass);\r",
							"    })\r",
							"    log (\"Actual message (Có Username & PW sai Format) -> \" + resBody);\r",
							"}\r",
							"\r",
							"//Check TH: Account ko tồn tại && Password đúng format\r",
							"if ( (inputAccount !== tenTK && inputAccount !== \"\") && isPasswordValid === true) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    log (\"Username ko tồn tại -- Expected Code phải là -> 404\");\r",
							"    pm.test(\"Username ko tồn tại -> Code = 404\", () => {\r",
							"        pm.expect(resCode).to.eql(404);\r",
							"    })\r",
							"    log (\"Username ko tồn tại -- Actual Code là -> \" + resCode);\r",
							"\r",
							"    log (\"Username ko tồn tại -- Expected message phải là -> Tài khoản người dùng không tồn tại\");\r",
							"    pm.test(\"Username ko tồn tại -> Message: \\\"Tài khoản người dùng không tồn tại\\\" \", () => {\r",
							"        pm.expect(resBody).to.eql(mess404);\r",
							"    })\r",
							"    log (\"Khi Username ko tồn tại -- Actual message là -> \" + resBody.message);\r",
							"    \r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "96f3b664-3d3d-4f20-b8e1-53d7d4191c5c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n    //Code 200\r\n    \"account\":\"{{usernameUV}}\", //Username đúng\r\n    \"password\":\"{{passwordUV}}\" //MK ĐÚNG\r\n\r\n    \r\n\r\n    /*\r\n    //Code 404\r\n    \"account\":\"saiaccount\", //ACC SAI\r\n    \"password\":\"{{passwordUV}}\" //MK ĐÚNG\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400\r\n    \"account\":\"\", //ACC Trống\r\n    \"password\":\"{{passwordUV}}\" //MK ĐÚNG\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400\r\n    \"account\":\"{{usernameUV}}\", //Username dung\r\n    \"password\":\"12345678\" //Pass ko hop le\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400\r\n    \"account\":\"{{usernameUV}}\", //Username dung\r\n    \"password\":\"\" //Pass ko hop le\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400(PW < 8 chars, PW thiếu ký tự đặt biệt)\r\n    \"account\":\"{{usernameUV}}\", //Username dung\r\n    \"password\":\"pass123\" //Pass ko hop le\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400\r\n    \"account\":\"{{usernameUV}}\", //Username dung\r\n    \"password\":\"Pass@456\" //Pass sai\r\n\r\n    */\r\n\r\n    /*\r\n    //Code 400(PW có @-a-A-1, PW < 8 chars)\r\n    \"account\":\"{{usernameUV}}\", //Username dung\r\n    \"password\":\"Pass@12\" //Pass sai\r\n\r\n    */\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/{{signInCandidatePath}}"
			},
			"response": []
		},
		{
			"name": "Đăng ký (Nhà tuyển dụng)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f7848f2-703b-4709-a8f0-2a7127f41c2e",
						"exec": [
							"let resCode = pm.response.code;\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"if (resBody !== null) {\r",
							"\r",
							"    console.log(\"Đăng ký thông tin và tài khoản thành công!\")\r",
							"    \r",
							"    pm.test(\"Register successfully => Code = 201\", () => {\r",
							"        pm.expect(resCode).to.eql(201);\r",
							"    })\r",
							"    \r",
							"    pm.test(\"All fields of Account ID: \" + resBody.id + \" was fulfilled\", () => {\r",
							"\r",
							"        pm.expect(resBody.name).to.be.not.empty;\r",
							"        pm.expect(resBody.account).to.be.not.empty;\r",
							"        pm.expect(resBody.password).to.be.not.empty;\r",
							"        pm.expect(resBody.address).to.be.not.empty;\r",
							"        pm.expect(resBody.nation).to.be.not.empty;\r",
							"        pm.expect(resBody.webstie).to.be.not.empty;\r",
							"        pm.expect(resBody.email).to.be.not.empty;\r",
							"        pm.expect(resBody.numberPhone).to.be.not.empty;\r",
							"        pm.expect(resBody.avatar).to.be.not.empty;\r",
							"    })\r",
							"  \r",
							"    //LƯU biến username-PW và userId sau khi tạo account TC\r",
							"    pm.environment.set(\"idHR\", resBody.id);\r",
							"    pm.environment.set(\"usernameHR\", resBody.account);\r",
							"    pm.environment.set(\"passwordHR\", resBody.password);\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test(\"Fail to Register an account => Code = 500\", () => {\r",
							"        pm.expect(resCode).to.eql(500);\r",
							"    })\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a4f1283f-a13b-4df7-8a22-12f0de3ea525",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "EmployerSignUp",
							"type": "text"
						},
						{
							"key": "account",
							"value": "employer001",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Pass@123",
							"type": "text"
						},
						{
							"key": "address",
							"value": "Cai Rang, Can Tho",
							"type": "text"
						},
						{
							"key": "nation",
							"value": "Viet Nam",
							"type": "text"
						},
						{
							"key": "webstie",
							"value": "employer.hr",
							"type": "text"
						},
						{
							"key": "email",
							"value": "employer@gmail.com",
							"type": "text"
						},
						{
							"key": "company",
							"type": "file",
							"src": "/C:/Users/lenovo/Pictures/Camera Roll/astronaut-ai-4k-wallpaper-uhdpaper.com-711@1@l.jpg"
						},
						{
							"key": "numberPhone",
							"value": "1234567890",
							"type": "text"
						}
					]
				},
				"url": "{{baseURL}}/{{signUpRecruiterPath}}"
			},
			"response": []
		},
		{
			"name": "ĐĂNG NHẬP (Tuyển dụng)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d4993870-73c3-4391-bb05-daf9ab91e509",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c01f1a2c-6f6b-4aca-9d9f-5ca7f2f3b8a1",
						"exec": [
							"let resCode = pm.response.code;\r",
							"\r",
							"//Biến tạo shortcut console log\r",
							"const log = console.log.bind(console);\r",
							"\r",
							"//Lấy value từ tab Body -> parse thành JSON\r",
							"let dataFromBody = JSON.parse(pm.request.body.raw);\r",
							"let inputPassword = dataFromBody.password;\r",
							"let inputAccount = dataFromBody.account;\r",
							"\r",
							"//Dùng So sánh với Value từ tab Body\r",
							"const idHR = pm.environment.get(\"idHR\");\r",
							"\r",
							"const accountHR = pm.environment.get(\"usernameHR\");\r",
							"const correctPass = pm.environment.get(\"passwordHR\");\r",
							"\r",
							"//message khi Đăng nhập thành công\r",
							"const messageSuccessLogin = \"Đăng nhập thành công\";\r",
							"\r",
							"//message khi 404(đúng format PW nhưng sai Account)\r",
							"const message404 = \"Tài khoản người dùng không tồn tại\";\r",
							"\r",
							"//message khi 400(Sai PW || PW trống || Username trống)\r",
							"const messIncorrectPass = \"Tài khoản người dùng không tồn tại\";\r",
							"\r",
							"//message khi 400(MK không đạt yêu cầu => 8 chars && có @-a-A-1)\r",
							"const messInvalidFormatPass = \"Mật khẩu không hợp lệ, mật khẩu phải tối thiểu 8 kí tự, bao gồm chữ hoa, thường, số\";\r",
							"\r",
							"\r",
							"// Password có ít nhất 1 ký tự thường & 1 ký tự HOA & 1 ký tự đặc biệt & 1 số. Len tối thiểu = 8\r",
							"let passwordSchema = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#?!@$%^&*-])[A-Za-z\\d#?!@$%^&*-]{8,}$/;\r",
							"\r",
							"\r",
							"// Kiểm tra Format của PW ở tab Body\r",
							"let isPasswordValid = passwordSchema.test(dataFromBody.password);\r",
							"\r",
							"//Đăng nhập THẤT BẠI 400 -- PW trống or Account trống or PW sai\r",
							"if ( inputPassword === \"\" || inputAccount === \"\" || (isPasswordValid === true && inputPassword !== correctPass && inputAccount === accountHR) ) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"Account hoặc PW trống || Account đúng và PW Sai => Code = 400\", () => {\r",
							"        pm.expect(resCode).to.eql(400);\r",
							"    })\r",
							"    log (\"Actual Code là: \" + resCode);\r",
							"\r",
							"    log (\"Expected message(Account hoặc PW trống || Account đúng và PW Sai): \" + messIncorrectPass);\r",
							"\r",
							"    pm.test(\"Message phải là \\\"Tài khoản người dùng không tồn tại\\\"\", () => {\r",
							"        pm.expect(pm.response.text()).to.eql(messIncorrectPass);\r",
							"    })\r",
							"    log (\"Actual message (Account hoặc PW trống || Account đúng và PW Sai): \" + resBody.message);\r",
							"\r",
							"}\r",
							"\r",
							"//Đăng nhập THÀNH CÔNG\r",
							"if (inputAccount === accountHR && inputPassword === correctPass) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"Account đúng && PW đúng -> Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"    log (\"Actual Code -> \" + resCode);\r",
							"\r",
							"    pm.test(\"Message phải là \\\"Đăng nhập thành công\\\"\", () => {\r",
							"        pm.expect(resBody.message).to.eql(messageSuccessLogin);\r",
							"    })\r",
							"    log (\"Actual message: \" + resBody.message);\r",
							"\r",
							"    pm.test(\"HR ID và Account từ RESPONSE phải trùng với thông tin khi đăng nhập\", () => {\r",
							"        \r",
							"        let matchInfo = true;\r",
							"\r",
							"        log(\"Id HR khi tạo account là: \" + idHR); //ID khi tạo account thành công\r",
							"        log(\"Username đang dùng đăng nhập là: \" + inputAccount); //username khi tạo account TC\r",
							"        \r",
							"               \r",
							"        let responseID = parseInt(resBody.user.id);//Chuyển ID(từ response) về dạng Int để đồng bộ data_type\r",
							"        let variableID = parseInt(idHR); //Chuyển ID(variable) về dạng Int để đồng bộ data_type \r",
							"\r",
							"        if (responseID !== variableID || resBody.user.account !== inputAccount) {\r",
							"\r",
							"            matchInfo = false;\r",
							"\r",
							"            log(\"Thông tin HR KHÔNG TRÙNG khớp khi Đăng Ký!\");\r",
							"            log(\"ID từ Response: \" + responseID);\r",
							"            log(\"Username từ Response: \" + resBody.user.account);\r",
							"\r",
							"        } else {\r",
							"\r",
							"            pm.environment.set(\"tokenHR\", resBody.token);\r",
							"            \r",
							"            log(\"Thông tin HR TRÙNG khớp khi Đăng Ký!\");\r",
							"            log(\"ID từ Response: \" + responseID);\r",
							"            log(\"Username từ Response: \" + resBody.user.account);\r",
							"\r",
							"        }\r",
							"\r",
							"        pm.expect(matchInfo).to.be.true;\r",
							"\r",
							"    })\r",
							"}\r",
							"\r",
							"//Check 400: Account có input - Mật Khẩu không đúng FORMAT\r",
							"if (inputAccount !== \"\" && inputPassword !== \"\" && isPasswordValid === false) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    log (\"Mật khẩu đang dùng đăng nhập là: \" + inputPassword);\r",
							"\r",
							"    log (\"Expected Code(khi Có nhập Username nhưng PW sai Format) -> 400\");\r",
							"    pm.test(\"Password KO đạt yêu cầu => Code should be 400 Bad\", () => {\r",
							"        pm.expect(resCode).to.eql(400);\r",
							"    })\r",
							"    log (\"Actual Code (khi Có nhập Username nhưng PW sai Format) -> \" + resCode);\r",
							"\r",
							"    log (\"Expected message (khi Có nhập Username nhưng PW sai Format) -> \" + messInvalidFormatPass);\r",
							"    pm.test(\"Password KO đạt yêu cầu => Nhận Message: \\\"Mật khẩu không hợp lệ, mật khẩu phải tối thiểu 8 kí tự, bao gồm chữ hoa, thường, số\\\"\", () => {\r",
							"        pm.expect(resBody).to.eql(messInvalidFormatPass);\r",
							"    })\r",
							"    log (\"Actual message (khi Có nhập Username nhưng PW sai Format) -> \" + resBody);\r",
							"}\r",
							"\r",
							"//Check TH: Account ko tồn tại && Password đúng format\r",
							"if ( (inputAccount !== accountHR && inputAccount !== \"\") && isPasswordValid === true) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"Username ko tồn tại -> Code = 404\", () => {\r",
							"        pm.expect(resCode).to.eql(404);\r",
							"    })\r",
							"    log (\"Actual Code -> \" + resCode);\r",
							"\r",
							"    pm.test(\"Khi Username ko tồn tại -> Message: \\\"Tài khoản người dùng không tồn tại\\\" \", () => {\r",
							"        pm.expect(resBody).to.eql(message404);\r",
							"    })\r",
							"    log (\"Actual message là -> \" + resBody.message);\r",
							"    \r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c075f4a0-f809-4ab1-b91b-33948c3d44e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "/* Valid Account\r\n        \"id\": 1553,\r\n        \"account\": \"API_Req04\",\r\n        \"password\": \"Matkhau@123\",\r\n*/\r\n\r\n{\r\n    \r\n    //(Acc đúng - Pass đúng)(200)\r\n    \"account\": \"{{usernameHR}}\", //Username đúng\r\n    \"password\":\"{{passwordHR}}\" //MK ĐÚNG\r\n    \r\n\r\n    /*\r\n    //(ACC trống - Pass đúng format)(400)\r\n    \"account\":\"\", //ACC Trống\r\n    \"password\":\"Matkhau@123\" //MK ĐÚNG FORMAT\r\n    */\r\n\r\n    /*\r\n    //(Acc ko tồn tại - Pass đúng Format)(404)\r\n    \"account\":\"saiaccount\", //ACC SAI\r\n    \"password\":\"Matkhau@123\" //MK ĐÚNG FORMAT\r\n    */\r\n\r\n    /*\r\n    //(Acc tồn tại - Pass trống)(400)\r\n    \"account\":\"API_Req04\", //Username đúng\r\n    \"password\":\"\"                //Pass blank\r\n    */\r\n\r\n    /*\r\n    //(PW < 8 chars, PW thieu @-a-A-1)(400)\r\n    \"account\":\"API_Req04\", //Username đúng\r\n    \"password\":\"pass123\" //Pass ko hop le\r\n    */\r\n\r\n    /*\r\n    //PW co @-a-A-1 ,PW < 8 chars (400)\r\n    \"account\":\"API_Req04\", //Username dung\r\n    \"password\":\"Pass@12\" //PW ko hop le\r\n    */\r\n\r\n    /*\r\n    //PW thieu @-a-A-1 ,PW => 8 chars (400)\r\n    \"account\":\"API_Req04\", //Username dung\r\n    \"password\":\"12345678\" //PW ko hop le\r\n    */\r\n\r\n    /*\r\n    //PW co @-a-A-1 ,PW => 8 chars, PW sai (400)\r\n    \"account\":\"API_Req04\", //Username dung\r\n    \"password\":\"Pass@456\" //PW sai\r\n    */\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/{{signInRecruiterPath}}"
			},
			"response": []
		},
		{
			"name": "Danh Sách Jobs",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d587ee9c-60fd-459d-a516-b5e3c104b7f7",
						"exec": [
							"let resCode = pm.response.code;\r",
							"let resBody = pm.response.text();\r",
							"\r",
							"if (resCode == 200) {\r",
							"\r",
							"    pm.test(\"GET danh sách JOB thành công -- Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"\r",
							"    pm.test(\"GET danh sách JOB thành công -- Response trả về các JOB\", () => {\r",
							"        pm.expect(resBody).to.be.not.null;\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test(\"GET danh sách JOB bị lỗi -- Code = 404\", () => {\r",
							"        pm.expect(resCode).to.eql(404);\r",
							"    })\r",
							"\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"id": "daf0ec41-5fd2-4019-992f-a53d50367c36",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/{{listJobPath}}"
			},
			"response": []
		},
		{
			"name": "Thông tin User hiện tại",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c735c84e-ad26-4f11-b554-21a1e6f29489",
						"exec": [
							"let resCode = pm.response.code;\r",
							"let resBody;\r",
							"\r",
							"const log = console.log.bind(console);\r",
							"\r",
							"if (resCode === 200) {\r",
							"\r",
							"    resBody = pm.response.json();\r",
							"\r",
							"    pm.test(\"GET thông tin User thành công -- Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"\r",
							"    pm.test(\"GET thông tin User thành công -- Response trả về thông tin của User\", () => {\r",
							"        pm.expect(resBody).to.have.property(\"id\");\r",
							"        pm.expect(resBody).to.have.property(\"name\");\r",
							"        pm.expect(resBody).to.have.property(\"account\");\r",
							"     \r",
							"    })\r",
							"} else if (resCode === 500) {\r",
							"\r",
							"    pm.test(\"Có lỗi trong quá trình lấy dữ liệu -- Code = 500\", () => {\r",
							"        pm.expect(resCode).to.eql(500);\r",
							"    })\r",
							"\r",
							"} else { //KO có Key \"token\" ở Headers\r",
							"     \r",
							"    resBody = pm.response.text();\r",
							"    const mess403 = \"Bạn Chưa Đăng Nhập\";\r",
							"\r",
							"    log (\"Expected Code (Chưa đăng nhập) -> 403\");\r",
							"    pm.test(\"Chưa đăng nhập -- Code = 403\", () => {\r",
							"        pm.expect(resCode).to.eql(403);\r",
							"    })\r",
							"    log (\"Actual Code (khi chưa đăng nhập) -> \" + resCode);\r",
							"\r",
							"    pm.test(\"Is message displayed as required\", () => {\r",
							"        pm.expect(resBody).to.eql(mess403);\r",
							"    })\r",
							"    log(\"Message: \" + resBody);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8e21da4a-6947-4ffe-b486-34afb6e0bae5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{tokenUV}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/{{currentCandiInfoPath}}"
			},
			"response": []
		},
		{
			"name": "Danh Sách các Ứng viên",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62758f93-cad2-466c-9d2b-12700bab41b6",
						"exec": [
							"let resCode = pm.response.code;\r",
							"\r",
							"const log = console.log.bind(console);\r",
							"\r",
							"let inputTokenHR = pm.request.headers.get(\"token\");\r",
							"let correctTokenHR = pm.environment.get(\"tokenHR\");\r",
							"\r",
							"let isTokenInputted = true;\r",
							"let isTokenInHeaders = true;\r",
							"\r",
							"// undefined = ko tìm thấy token trong Headers\r",
							"if (inputTokenHR === undefined) {\r",
							"    isTokenInHeaders = false;\r",
							"}\r",
							"// Có add key token vào Headers nhưng ko nhập value\r",
							"if (inputTokenHR === null) {\r",
							"    isTokenInputted = false;\r",
							"}\r",
							"\r",
							"//TH: Có Token nhưng token ko phải HR || Có Token nhưng ko nhập value\r",
							"if (isTokenInHeaders === true  && inputTokenHR !== correctTokenHR) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    log (\"Bạn không phải là Nhà Tuyển Dụng\");\r",
							"\r",
							"    pm.test(\"Token trống hoặc Token ko là một HR -- Code = 403\", () => {\r",
							"        pm.expect(resCode).to.eql(403);\r",
							"    })\r",
							"    \r",
							"}\r",
							"//TH: Ko add Key \"token\" ở Headers => Code = 403\r",
							"if (isTokenInHeaders === false) {\r",
							"\r",
							"    log (\"Ko tìm thấy Token trong tab Headers\");\r",
							"\r",
							"    pm.test(\"Ko add Key 'token' -> Code = 403\", () => {\r",
							"        pm.expect(resCode).to.eql(403);\r",
							"    })\r",
							"\r",
							"}\r",
							"\r",
							"//TH: Có Token\r",
							"if (isTokenInputted === true && inputTokenHR === correctTokenHR) {\r",
							"\r",
							"    let resBody = pm.response.json();\r",
							"\r",
							"    log (\"ĐÃ add token của HR\");\r",
							"\r",
							"    pm.test(\"GET DS Ứng Viên thành công -- Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"\r",
							"    pm.test(\"GET DS Ứng Viên thành công -- Response trả về thông tin các Ứng Viên\", () => {\r",
							"        pm.expect(resBody).to.be.not.null;\r",
							"    })\r",
							"\r",
							"}\r",
							"\r",
							"if (resCode !== 200 && resCode !== 403){\r",
							"\r",
							"    pm.test(\"Có lỗi trong quá trình lấy dữ liệu - Code = 500\", () => {\r",
							"        pm.expect(resCode).to.eql(500);\r",
							"    })\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "325c7bf6-be08-433c-82f3-ee9e5e5ef745",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{tokenUV}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/{{listCandidatePath}}"
			},
			"response": []
		},
		{
			"name": "Ứng tuyển",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "70c6a5ea-cee7-4446-9507-729dd4bb4a73",
						"exec": [
							"let resCode = pm.response.code;\r",
							"let resBody = pm.response.text();\r",
							"\r",
							"const log = console.log.bind(console);\r",
							"\r",
							"let inputToken = pm.request.headers.get(\"token\");\r",
							"\r",
							"let isUngVien = pm.environment.get(\"tokenUV\");\r",
							"\r",
							"//Token với role là Ứng Viên\r",
							"if(inputToken === isUngVien && resCode === 200) {\r",
							"\r",
							"    //let resBody = pm.response.json();\r",
							"\r",
							"    log (\"Đang sử dụng Token của Ứng Viên\");\r",
							"\r",
							"    pm.test(\"Ứng tuyển thành công -- Code = 200\", () => {\r",
							"        pm.expect(resCode).to.eql(200);\r",
							"    })\r",
							"\r",
							"    log (\"Ứng tuyển thành công!\");\r",
							"\r",
							"}\r",
							"\r",
							"// Token với role KO là Ứng Viên\r",
							"if (inputToken !== undefined && inputToken !== isUngVien) {\r",
							"\r",
							"\r",
							"\r",
							"    log (\"Token ko phải là Ứng Viên\");\r",
							"\r",
							"    log (\"Expected Code = 403\");\r",
							"    pm.test(\"Ứng tuyển thất bại(token ko phải là UV) -- Code = 403\", () => {\r",
							"        pm.expect(resCode).to.eql(403);\r",
							"    })\r",
							"\r",
							"    log (\"Actual Code = \" + resCode);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d610f8b1-7780-41ec-a5f7-5ad6cb3ce92b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "{{tokenUV}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"jobId\":85\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/{{applyJobPath}}"
			},
			"response": []
		}
	]
}